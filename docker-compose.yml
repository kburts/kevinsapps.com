version: '2'

services:
  # My apps
  music:
    build:
      context: ./music
    volumes:
      - ./music:/code
      - /public
    networks:
      - back-tier
    command: bash -c "python manage.py collectstatic --no-input && python manage.py runserver 0.0.0.0:8010"
    ports:
      - "8010:8010"

  vochuts:
    build:
      context: ./vochuts/vochuts
    volumes:
     - ./vochuts/vochuts:/voccode
     - /public
    networks:
     - back-tier
    command: bash -c "python manage.py collectstatic --no-input && python manage.py runserver 0.0.0.0:8020"
    ports:
     - "8020:8020"

  analytics:
    build:
      context: ./analytics
    volumes:
     - ./analytics:/analyticscode
     - /public
    networks:
     - back-tier
    command: bash -c "python manage.py collectstatic --no-input && python manage.py runserver 0.0.0.0:8030"
    ports:
     - "8030:8030"

  flask:
    build:
      context: ./flask
    volumes:
      - ./flask:/code
    networks:
      - back-tier
    command:
      python -m flask run --host=0.0.0.0
    ports:
      - "5000:5000"

  # 3rd party apps
  nextcloud:
    image: wonderfall/nextcloud
    volumes:
      - /mnt/nextcloud/data:/data
      - /mnt/nextcloud/config:/config
      - /mnt/nextcloud/apps:/apps2
      - /mnt/nextcloud/themes:/nextcloud/themes
    env_file:
     - nextcloud/.env
    ports:
      - "8888:8888"
    networks:
     - back-tier

  ghost:
    image: ghost:alpine
    ports:
      - "2368:2368"
    volumes:
      - ./ghost:/var/lib/ghost
    env_file:
     - ghost/.env
    networks:
     - back-tier

  db:
    image: postgres:9.5-alpine
    networks:
      - back-tier
    environment:
      - DB_NAME=postgres,analytics
    volumes:
      - pg-data:/var/lib/postgresql/data

  redis:
    image: redis:3.2-alpine
    networks:
      - back-tier

  caddy:
    build:
      context: .
      dockerfile: ./caddy/Dockerfile
    depends_on:
      - music
      - flask
      - vochuts
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy:/root/.caddy
    networks:
      - back-tier
    command: -conf=Caddyfile

volumes:
  pg-data:
    driver: local
  caddy: {}

networks:
  back-tier:
    driver: bridge
